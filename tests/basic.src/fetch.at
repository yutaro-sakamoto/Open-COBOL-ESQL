AT_SETUP([fetch statement test])

AT_DATA([prog.cbl], [
       IDENTIFICATION              DIVISION.
      ******************************************************************
       PROGRAM-ID.                 prog.
      ******************************************************************
       DATA                        DIVISION.
      ******************************************************************
       WORKING-STORAGE             SECTION.
       01  TEST-DATA.
         03 FILLER       PIC X(28) VALUE "0001北海　太郎          0400".
         03 FILLER       PIC X(28) VALUE "0002青森　次郎          0350".
         03 FILLER       PIC X(28) VALUE "0003秋田　三郎          0300".
         03 FILLER       PIC X(28) VALUE "0004岩手　四郎          025p".
         03 FILLER       PIC X(28) VALUE "0005宮城　五郎          020p".
         03 FILLER       PIC X(28) VALUE "0006福島　六郎          0150".
         03 FILLER       PIC X(28) VALUE "0007栃木　七郎          010p".
         03 FILLER       PIC X(28) VALUE "0008茨城　八郎          0050".
         03 FILLER       PIC X(28) VALUE "0009群馬　九郎          020p".
         03 FILLER       PIC X(28) VALUE "0010埼玉　十郎          0350".

       01  TEST-DATA-R   REDEFINES TEST-DATA.
         03  TEST-TBL    OCCURS  10.
           05  TEST-NO             PIC S9(04).
           05  TEST-NAME           PIC  X(20) .
           05  TEST-SALARY         PIC S9(04).
       01  IDX                     PIC  9(02).
       01 TEST-CASE-COUNT PIC 9999 VALUE 1.

       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  DBNAME                  PIC  X(30) VALUE SPACE.
       01  USERNAME                PIC  X(30) VALUE SPACE.
       01  PASSWD                  PIC  X(10) VALUE SPACE.

       01  EMP-REC-VARS.
         03  EMP-NO                PIC S9(04) VALUE ZERO.
         03  EMP-NAME              PIC  X(20) .
         03  EMP-SALARY            PIC S9(04) VALUE ZERO.
       EXEC SQL END DECLARE SECTION END-EXEC.

       EXEC SQL INCLUDE SQLCA END-EXEC.
      ******************************************************************
       PROCEDURE                   DIVISION.
      ******************************************************************
       MAIN-RTN.
           
       PERFORM SETUP-DB.

           EXEC SQL 
               FETCH C1 INTO :EMP-NO, :EMP-NAME, :EMP-SALARY
           END-EXEC.
           PERFORM UNTIL SQLCODE NOT = ZERO
              DISPLAY EMP-NO ", " EMP-NAME ", " EMP-SALARY
              EXEC SQL 
                  FETCH C1 INTO :EMP-NO, :EMP-NAME, :EMP-SALARY
              END-EXEC
           END-PERFORM.

       PERFORM CLEANUP-DB.

      *    END
           STOP RUN.

      ******************************************************************
       SETUP-DB.
      ******************************************************************

      *    SERVER
           MOVE  "<|DB_NAME|>@<|DB_HOST|>:<|DB_PORT|>"
             TO DBNAME.
           MOVE  "<|DB_USER|>"
             TO USERNAME.
           MOVE  "<|DB_PASSWORD|>"
             TO PASSWD.

           EXEC SQL
               CONNECT :USERNAME IDENTIFIED BY :PASSWD USING :DBNAME 
           END-EXEC.

           EXEC SQL
               DROP TABLE IF EXISTS EMP
           END-EXEC.

           EXEC SQL
                CREATE TABLE EMP
                (
                    EMP_NO     NUMERIC(4,0) NOT NULL,
                    EMP_NAME   CHAR(20),
                    EMP_SALARY NUMERIC(4,0),
                    CONSTRAINT IEMP_0 PRIMARY KEY (EMP_NO)
                )
           END-EXEC.

      *    INSERT ROWS USING HOST VARIABLE
           PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > 10
              MOVE TEST-NO(IDX)     TO  EMP-NO
              MOVE TEST-NAME(IDX)   TO  EMP-NAME
              MOVE TEST-SALARY(IDX) TO  EMP-SALARY
              EXEC SQL
                 INSERT INTO EMP VALUES
                        (:EMP-NO,:EMP-NAME,:EMP-SALARY)
              END-EXEC
           END-PERFORM.
      *    DECLARE CURSOR
           EXEC SQL 
               DECLARE C1 CURSOR FOR
               SELECT EMP_NO, EMP_NAME, EMP_SALARY 
                      FROM EMP
                      ORDER BY EMP_NO
           END-EXEC.
      *    OPEN CURSOR
           EXEC SQL
               OPEN C1
           END-EXEC.

      ******************************************************************
       CLEANUP-DB.
      ******************************************************************
           EXEC SQL
               CLOSE C1
           END-EXEC.

           EXEC SQL
               DROP TABLE IF EXISTS EMP
           END-EXEC.

           EXEC SQL
               DISCONNECT ALL
           END-EXEC.

      ******************************************************************
       DISPLAY-TEST-RESULT.
      ******************************************************************
           IF  SQLCODE = ZERO
             THEN

               DISPLAY "<log> test case " TEST-CASE-COUNT ": success"
               ADD 1 TO TEST-CASE-COUNT

             ELSE
               DISPLAY "*** SQL ERROR ***"
               DISPLAY "SQLCODE: " SQLCODE " " NO ADVANCING
               EVALUATE SQLCODE
                  WHEN  +10
                     DISPLAY "Record not found"
                  WHEN  -01
                     DISPLAY "Connection falied"
                  WHEN  -20
                     DISPLAY "Internal error"
                  WHEN  -30
                     DISPLAY "PostgreSQL error"
                     DISPLAY "ERRCODE: "  SQLSTATE
                     DISPLAY SQLERRMC
                  *> TO RESTART TRANSACTION, DO ROLLBACK.
                     EXEC SQL
                         ROLLBACK
                     END-EXEC
                  WHEN  OTHER
                     DISPLAY "Undefined error"
                     DISPLAY "ERRCODE: "  SQLSTATE
                     DISPLAY SQLERRMC
               END-EVALUATE
               STOP RUN.
      ******************************************************************  


])
AT_CHECK([ocesql prog.cbl prog.cob > /dev/null])
AT_CHECK([${EMBED_DB_INFO} prog.cob])
AT_CHECK([${COMPILE_MODULE} prog.cob])
AT_CHECK([${RUN_MODULE} prog 2> /dev/null], [0],
[+0001, 北海　太郎          , +0400
+0002, 青森　次郎          , +0350
+0003, 秋田　三郎          , +0300
+0004, 岩手　四郎          , -0250
+0005, 宮城　五郎          , -0200
+0006, 福島　六郎          , +0150
+0007, 栃木　七郎          , -0100
+0008, 茨城　八郎          , +0050
+0009, 群馬　九郎          , -0200
+0010, 埼玉　十郎          , +0350
])

AT_CLEANUP

AT_SETUP([fetch into occurs item])

AT_DATA([prog.cbl], [
       IDENTIFICATION              DIVISION.
      ******************************************************************
       PROGRAM-ID.                 prog.
      ******************************************************************
       DATA                        DIVISION.
      ******************************************************************
       WORKING-STORAGE             SECTION.
       01  TEST-DATA.
         03 FILLER       PIC X(28) VALUE "0001北海　太郎          0400".
         03 FILLER       PIC X(28) VALUE "0002青森　次郎          0350".
         03 FILLER       PIC X(28) VALUE "0003秋田　三郎          0300".
         03 FILLER       PIC X(28) VALUE "0004岩手　四郎          025p".
         03 FILLER       PIC X(28) VALUE "0005宮城　五郎          020p".
         03 FILLER       PIC X(28) VALUE "0006福島　六郎          0150".
         03 FILLER       PIC X(28) VALUE "0007栃木　七郎          010p".
         03 FILLER       PIC X(28) VALUE "0008茨城　八郎          0050".
         03 FILLER       PIC X(28) VALUE "0009群馬　九郎          020p".
         03 FILLER       PIC X(28) VALUE "0010埼玉　十郎          0350".

       01  TEST-DATA-R   REDEFINES TEST-DATA.
         03  TEST-TBL    OCCURS  10.
           05  TEST-NO             PIC S9(04).
           05  TEST-NAME           PIC  X(20) .
           05  TEST-SALARY         PIC S9(04).
       01  IDX                     PIC  9(02).
       01  FETCH-COUNT             PIC  9(04).

       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  DBNAME                  PIC  X(30) VALUE SPACE.
       01  USERNAME                PIC  X(30) VALUE SPACE.
       01  PASSWD                  PIC  X(10) VALUE SPACE.

       01  EMP-REC-VARS.
         03  EMP-NO                PIC S9(04) VALUE ZERO.
         03  EMP-NAME              PIC  X(20) .
         03  EMP-SALARY            PIC S9(04) VALUE ZERO.

       01  OCCURS-EMP-REC.
        02  OCCURS-EMP-REC-VARS OCCURS 3.
         03  O-EMP-NO              PIC S9(04) VALUE ZERO.
         03  O-EMP-NAME            PIC  X(20) .
         03  O-EMP-SALARY          PIC S9(04) VALUE ZERO.

       01  OCCURS-03-EMP-REC.
         03  OCCURS-O-EMP-NO       PIC S9(04) VALUE ZERO OCCURS 3.
         03  OCCURS-O-EMP-NAME     PIC  X(20) OCCURS 3.
         03  OCCURS-O-EMP-SALARY   PIC S9(04) VALUE ZERO OCCURS 3.

       EXEC SQL END DECLARE SECTION END-EXEC.

       EXEC SQL INCLUDE SQLCA END-EXEC.
      ******************************************************************
       PROCEDURE                   DIVISION.
      ******************************************************************
       MAIN-RTN.
           PERFORM SETUP-DB.
           PERFORM FETCH-DB-1.
           PERFORM FETCH-DB-2.
           PERFORM CLEANUP-DB.
       MAIN-EXT.
           STOP RUN.

      ******************************************************************
       SETUP-DB.
      ******************************************************************

      *    SERVER
           MOVE  "<|DB_NAME|>@<|DB_HOST|>:<|DB_PORT|>"
             TO DBNAME.
           MOVE  "<|DB_USER|>"
             TO USERNAME.
           MOVE  "<|DB_PASSWORD|>"
             TO PASSWD.

           EXEC SQL
               CONNECT :USERNAME IDENTIFIED BY :PASSWD USING :DBNAME 
           END-EXEC.

           EXEC SQL
               DROP TABLE IF EXISTS EMP
           END-EXEC.

           EXEC SQL
                CREATE TABLE EMP
                (
                    EMP_NO     NUMERIC(4,0) NOT NULL,
                    EMP_NAME   CHAR(20),
                    EMP_SALARY NUMERIC(4,0),
                    CONSTRAINT IEMP_0 PRIMARY KEY (EMP_NO)
                )
           END-EXEC.

      *    INSERT ROWS USING HOST VARIABLE
           PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > 10
              MOVE TEST-NO(IDX)     TO  EMP-NO
              MOVE TEST-NAME(IDX)   TO  EMP-NAME
              MOVE TEST-SALARY(IDX) TO  EMP-SALARY
              EXEC SQL
                 INSERT INTO EMP VALUES
                        (:EMP-NO,:EMP-NAME,:EMP-SALARY)
              END-EXEC
           END-PERFORM.

      ******************************************************************
       FETCH-DB-1.
      ******************************************************************
      *    DECLARE CURSOR
           EXEC SQL 
               DECLARE C1 CURSOR FOR
               SELECT EMP_NO, EMP_NAME, EMP_SALARY 
                      FROM EMP
                      ORDER BY EMP_NO
           END-EXEC.
      *    OPEN CURSOR
           EXEC SQL
               OPEN C1
           END-EXEC.
      *  　FETCH CURSOR
           MOVE SPACE TO OCCURS-EMP-REC.
           EXEC SQL 
               FETCH C1 INTO :OCCURS-EMP-REC-VARS
           END-EXEC.
           PERFORM UNTIL SQLCODE NOT = ZERO
              PERFORM DISPLAY-OCCURS-EMP-REC
              MOVE SPACE TO OCCURS-EMP-REC
              EXEC SQL 
                  FETCH C1 INTO :OCCURS-EMP-REC-VARS
              END-EXEC
           END-PERFORM.

      ******************************************************************
       FETCH-DB-2.
      ******************************************************************           
      *    OPEN CURSOR
           EXEC SQL
               OPEN C1
           END-EXEC.
      *    FETCH CURSOR
           EXEC SQL 
           FETCH C1 INTO :OCCURS-O-EMP-NO, 
           :OCCURS-O-EMP-NAME, :OCCURS-O-EMP-SALARY
           END-EXEC.
           PERFORM UNTIL SQLCODE NOT = ZERO
              PERFORM DISPLAY-OCCURS-03-EMP-REC
              MOVE SPACE TO OCCURS-03-EMP-REC
              EXEC SQL 
                  FETCH C1 INTO :OCCURS-O-EMP-NO, 
                   :OCCURS-O-EMP-NAME, :OCCURS-O-EMP-SALARY
              END-EXEC
           END-PERFORM.

      ******************************************************************
       DISPLAY-OCCURS-EMP-REC.
      ******************************************************************
           MOVE SQLERRD(3) TO FETCH-COUNT.
           DISPLAY FETCH-COUNT.
           PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > 3
              IF OCCURS-EMP-REC-VARS(IDX) = LOW-VALUE
                    MOVE ZERO TO O-EMP-NO(IDX)
                    MOVE SPACE TO O-EMP-NAME(IDX)
                    MOVE ZERO TO O-EMP-SALARY(IDX)
              END-IF
              DISPLAY O-EMP-NO(IDX) ", "
                      O-EMP-NAME(IDX) ", "
                      O-EMP-SALARY(IDX)
           END-PERFORM.
      ******************************************************************
       DISPLAY-OCCURS-03-EMP-REC.
      ******************************************************************
           MOVE SQLERRD(3) TO FETCH-COUNT.
           DISPLAY FETCH-COUNT.
           PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > 3
              IF OCCURS-O-EMP-NO(IDX) = LOW-VALUE 
               OR OCCURS-O-EMP-NAME(IDX) = LOW-VALUE
               OR OCCURS-O-EMP-SALARY(IDX) = LOW-VALUE
                    MOVE ZERO TO OCCURS-O-EMP-NO(IDX)
                    MOVE SPACE TO OCCURS-O-EMP-NAME(IDX)
                    MOVE ZERO TO OCCURS-O-EMP-SALARY(IDX)
              END-IF
              DISPLAY OCCURS-O-EMP-NO(IDX) ", "
                      OCCURS-O-EMP-NAME(IDX) ", "
                      OCCURS-O-EMP-SALARY(IDX)
           END-PERFORM.

      ******************************************************************
       CLEANUP-DB.
      ******************************************************************
           EXEC SQL
               CLOSE C1
           END-EXEC.

           EXEC SQL
               DROP TABLE IF EXISTS EMP
           END-EXEC.

           EXEC SQL
               DISCONNECT ALL
           END-EXEC.

])
AT_CHECK([ocesql prog.cbl prog.cob > /dev/null])
AT_CHECK([${EMBED_DB_INFO} prog.cob])
AT_CHECK([${COMPILE_MODULE} prog.cob])
AT_CHECK([${RUN_MODULE} prog 2> /dev/null], [0],
[0003
+0001, 北海　太郎          , +0400
+0002, 青森　次郎          , +0350
+0003, 秋田　三郎          , +0300
0006
+0004, 岩手　四郎          , -0250
+0005, 宮城　五郎          , -0200
+0006, 福島　六郎          , +0150
0009
+0007, 栃木　七郎          , -0100
+0008, 茨城　八郎          , +0050
+0009, 群馬　九郎          , -0200
0010
+0010, 埼玉　十郎          , +0350
+0000,                     , +0000
+0000,                     , +0000
0013
+0001, 北海　太郎          , +0400
+0002, 青森　次郎          , +0350
+0003, 秋田　三郎          , +0300
0016
+0004, 岩手　四郎          , -0250
+0005, 宮城　五郎          , -0200
+0006, 福島　六郎          , +0150
0019
+0007, 栃木　七郎          , -0100
+0008, 茨城　八郎          , +0050
+0009, 群馬　九郎          , -0200
0020
+0010, 埼玉　十郎          , +0350
+0000,                     , +0000
+0000,                     , +0000
])

AT_CLEANUP

AT_SETUP([fetch into multi record items])

AT_DATA([prog.cbl], [
       IDENTIFICATION              DIVISION.
      ******************************************************************
       PROGRAM-ID.                 prog.
      ******************************************************************
       DATA                        DIVISION.
      ******************************************************************
       WORKING-STORAGE             SECTION.
       01  TEST-DATA.
         03 FILLER       PIC X(28) VALUE "0001北海　太郎          0400".
         03 FILLER       PIC X(28) VALUE "0002青森　次郎          0350".
         03 FILLER       PIC X(28) VALUE "0003秋田　三郎          0300".
         03 FILLER       PIC X(28) VALUE "0004岩手　四郎          025p".
         03 FILLER       PIC X(28) VALUE "0005宮城　五郎          020p".
         03 FILLER       PIC X(28) VALUE "0006福島　六郎          0150".
         03 FILLER       PIC X(28) VALUE "0007栃木　七郎          010p".
         03 FILLER       PIC X(28) VALUE "0008茨城　八郎          0050".
         03 FILLER       PIC X(28) VALUE "0009群馬　九郎          020p".
         03 FILLER       PIC X(28) VALUE "0010埼玉　十郎          0350".

       01  TEST-DATA-R   REDEFINES TEST-DATA.
         03  TEST-TBL    OCCURS  10.
           05  TEST-NO             PIC S9(04).
           05  TEST-NAME           PIC  X(20) .
           05  TEST-SALARY         PIC S9(04).
       01  IDX                     PIC  9(02).

       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  DBNAME                  PIC  X(30) VALUE SPACE.
       01  USERNAME                PIC  X(30) VALUE SPACE.
       01  PASSWD                  PIC  X(10) VALUE SPACE.

       01  EMP-REC-VARS.
         03  EMP-NO                PIC S9(04) VALUE ZERO.
         03  EMP-NAME              PIC  X(20) .
         03  EMP-SALARY            PIC S9(04) VALUE ZERO.

       01  MULTI-REC-VARS.
         03  M-EMP-NO              PIC S9(04) VALUE ZERO.
         03  M-EMP-NAME            PIC  X(20) .
       01  M-EMP-SALARY          PIC S9(04) VALUE ZERO.

       EXEC SQL END DECLARE SECTION END-EXEC.

       EXEC SQL INCLUDE SQLCA END-EXEC.
      ******************************************************************
       PROCEDURE                   DIVISION.
      ******************************************************************
       MAIN-RTN.
           PERFORM SETUP-DB.
           PERFORM FETCH-DB.
           PERFORM CLEANUP-DB.
       MAIN-EXT.
           STOP RUN.

      ******************************************************************
       SETUP-DB.
      ******************************************************************

           MOVE  "<|DB_NAME|>@<|DB_HOST|>:<|DB_PORT|>"
             TO DBNAME.
           MOVE  "<|DB_USER|>"
             TO USERNAME.
           MOVE  "<|DB_PASSWORD|>"
             TO PASSWD.

           EXEC SQL
               CONNECT :USERNAME IDENTIFIED BY :PASSWD USING :DBNAME 
           END-EXEC.

           EXEC SQL
               DROP TABLE IF EXISTS EMP
           END-EXEC.

           EXEC SQL
                CREATE TABLE EMP
                (
                    EMP_NO     NUMERIC(4,0) NOT NULL,
                    EMP_NAME   CHAR(20),
                    EMP_SALARY NUMERIC(4,0),
                    CONSTRAINT IEMP_0 PRIMARY KEY (EMP_NO)
                )
           END-EXEC.

      *    INSERT ROWS USING HOST VARIABLE
           PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > 10
              MOVE TEST-NO(IDX)     TO  EMP-NO
              MOVE TEST-NAME(IDX)   TO  EMP-NAME
              MOVE TEST-SALARY(IDX) TO  EMP-SALARY
              EXEC SQL
                 INSERT INTO EMP VALUES
                        (:EMP-NO,:EMP-NAME,:EMP-SALARY)
              END-EXEC
           END-PERFORM.

      ******************************************************************
       FETCH-DB.
      ******************************************************************
      *    DECLARE CURSOR
           EXEC SQL 
               DECLARE C1 CURSOR FOR
               SELECT EMP_NO, EMP_NAME, EMP_SALARY 
                      FROM EMP
                      ORDER BY EMP_NO
           END-EXEC.
      *    OPEN CURSOR
           EXEC SQL
               OPEN C1
           END-EXEC.
      *    FETCH CURSOR
           EXEC SQL 
               FETCH C1 INTO :MULTI-REC-VARS, :M-EMP-SALARY
           END-EXEC.
           PERFORM UNTIL SQLCODE NOT = ZERO
              DISPLAY M-EMP-NO ", "
                      M-EMP-NAME ", "
                      M-EMP-SALARY
              EXEC SQL 
                  FETCH C1 INTO :MULTI-REC-VARS, :M-EMP-SALARY
              END-EXEC
           END-PERFORM.

      ******************************************************************
       CLEANUP-DB.
      ******************************************************************
           EXEC SQL
               CLOSE C1
           END-EXEC.

           EXEC SQL
               DROP TABLE IF EXISTS EMP
           END-EXEC.

           EXEC SQL
               DISCONNECT ALL
           END-EXEC.

])
AT_CHECK([ocesql prog.cbl prog.cob > /dev/null])
AT_CHECK([${EMBED_DB_INFO} prog.cob])
AT_CHECK([${COMPILE_MODULE} prog.cob])
AT_CHECK([${RUN_MODULE} prog 2> /dev/null], [0],
[+0001, 北海　太郎          , +0400
+0002, 青森　次郎          , +0350
+0003, 秋田　三郎          , +0300
+0004, 岩手　四郎          , -0250
+0005, 宮城　五郎          , -0200
+0006, 福島　六郎          , +0150
+0007, 栃木　七郎          , -0100
+0008, 茨城　八郎          , +0050
+0009, 群馬　九郎          , -0200
+0010, 埼玉　十郎          , +0350
])

AT_CLEANUP
